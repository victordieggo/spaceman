{"version":3,"file":"js/main.js","mappings":"oBAAA,CACEA,SAAU,CACRC,OAAQC,SAASC,cAAc,YAGjCC,IAAAA,GACOC,KAAKL,SAASC,SACnBI,KAAKC,cACLD,KAAKE,cACP,EAEAD,WAAAA,GACEJ,SAASM,iBAAiB,SAAUC,IAClC,MAAMC,EAASD,EAAMC,OACfC,EAAeD,EAAOE,WAM5B,GAJIF,EAAOG,UAAUC,SAAS,kBAC5BT,KAAKU,eAGHJ,EAAaE,UAAUC,SAAS,gCAIlC,OAHAL,EAAMO,iBACNX,KAAKY,cAAcN,QACnBN,KAAKa,mBAAmBP,GAItBQ,OAAOC,YAAc,KACvBf,KAAKa,mBAAmBb,KAAKL,SAASC,OACxC,GAEJ,EAEAM,WAAAA,GACEL,SAASM,iBAAiB,SAAUC,IAClC,MAAMY,EAAMZ,EAAMY,IAClBhB,KAAKiB,eAAejB,KAAKL,SAASC,QAAQsB,SAASC,KACtC,UAAPH,GAA0B,OAAPA,IAAiBG,EAAWV,SAASL,EAAMC,UAChEL,KAAKY,cAAcO,EACrB,GACA,GAEN,EAEAC,cAAAA,CAAeC,GACb,MAAMC,EAAeD,EAAQE,aAAa,iBACrCD,GACLD,EAAQG,aAAa,gBAAiC,SAAhBF,EAA0B,OAAS,QAC3E,EAEAL,eAAeQ,GACNA,EAAQC,iBAAiB,cAGlCb,kBAAAA,CAAmBQ,GACjBrB,KAAKiB,eAAeI,EAAQd,YAAYW,SAAQC,IAC1CA,GAAcE,GAChBrB,KAAKY,cAAcO,EACrB,GAEJ,EAEAT,YAAAA,GACE,MAAMd,EAASI,KAAKL,SAASC,OAC7B,GAAIA,EAAOY,UAAUC,SAAS,gBAAiB,OAE/CZ,SAAS8B,KAAKnB,UAAUoB,OAAO,wBAC/BhC,EAAOY,UAAUqB,IAAI,gBACrBjC,EAAOY,UAAUoB,OAAO,aAExB,MAAME,EAAe,iBACfC,EAAanC,EAAOE,cAAc,IAAMgC,GAS9C,GAPA,CAAC,qBAAsB,gBAAgBE,KAAIC,IACzCrC,EAAOO,iBAAiB8B,GAAgB,IAAMrC,EAAOY,UAAU0B,OAAO,kBAClEH,GACFA,EAAW5B,iBAAiB8B,GAAgB,IAAMrC,EAAOuC,YAAYJ,IACvE,KAGGA,EAAY,CACf,MAAMK,EAAavC,SAASwC,cAAc,OAC1CD,EAAWE,UAAY,GAAGR,kBAC1BM,EAAWG,QAAU,OACrB3C,EAAO4C,YAAYJ,EACrB,CAEiBvC,SAAS6B,iBAAiB,kBAClCR,SAAQuB,GAAWzC,KAAKoB,eAAeqB,IAClD,EAEA7B,aAAAA,CAAcS,GACZA,EAAQb,UAAUoB,OAAO,aACzB5B,KAAKoB,eAAeC,EAAQqB,kBAC9B,ICvFO3C,M","sources":["webpack://spaceman/./assets/src/js/components/navbar.js","webpack://spaceman/./assets/src/js/main.js"],"sourcesContent":["export default {\n  elements: {\n    navBar: document.querySelector('.navBar'),\n  },\n\n  init() {\n    if (!this.elements.navBar) return;\n    this.handleClick();\n    this.handleKeyup();\n  },\n\n  handleClick() {\n    document.addEventListener('click', (event) => {\n      const target = event.target;\n      const targetParent = target.parentNode;\n\n      if (target.classList.contains('navBar-toggle')) {\n        this.toggleNavbar();\n      }\n\n      if (targetParent.classList.contains('navBar-menuItem--hasChildren')) {\n        event.preventDefault();\n        this.toggleSubmenu(targetParent);\n        this.disableActiveItems(targetParent);\n        return;\n      }\n\n      if (window.innerWidth >= 840) {\n        this.disableActiveItems(this.elements.navBar);\n      }\n    });\n  },\n\n  handleKeyup() {\n    document.addEventListener('keyup', (event) => {\n      const key = event.key;\n      this.getActiveItems(this.elements.navBar).forEach((activeItem) => {\n        if (key == 'Escape' || key == 'Tab' && !activeItem.contains(event.target)) {\n          this.toggleSubmenu(activeItem);\n        }\n      });\n    });\n  },\n\n  toggleExpanded(element) {\n    const ariaExpanded = element.getAttribute('aria-expanded');\n    if (!ariaExpanded) return;\n    element.setAttribute('aria-expanded', ariaExpanded == 'false' ? 'true' : 'false');\n  },\n\n  getActiveItems(context) {\n    return context.querySelectorAll('.is-active');\n  },\n\n  disableActiveItems(element) {\n    this.getActiveItems(element.parentNode).forEach(activeItem => {\n      if (activeItem != element) {\n        this.toggleSubmenu(activeItem);\n      }\n    });\n  },\n\n  toggleNavbar() {\n    const navBar = this.elements.navBar;\n    if (navBar.classList.contains('is-animating')) return;\n\n    document.body.classList.toggle('navBar-disableScroll');\n    navBar.classList.add('is-animating');\n    navBar.classList.toggle('is-active');\n\n    const overlayClass = 'navBar-overlay';\n    const navOverlay = navBar.querySelector('.' + overlayClass);\n\n    ['webkitAnimationEnd', 'animationend'].map(animationEvent => {\n      navBar.addEventListener(animationEvent, () => navBar.classList.remove('is-animating'));\n      if (navOverlay) {\n        navOverlay.addEventListener(animationEvent, () => navBar.removeChild(navOverlay));\n      }\n    });\n\n    if (!navOverlay) {\n      const newOverlay = document.createElement('div');\n      newOverlay.className = `${overlayClass} navBar-toggle`;\n      newOverlay.onclick = () => { };\n      navBar.appendChild(newOverlay);\n    }\n\n    const triggers = document.querySelectorAll('.navBar-toggle');\n    triggers.forEach(trigger => this.toggleExpanded(trigger));\n  },\n\n  toggleSubmenu(element) {\n    element.classList.toggle('is-active');\n    this.toggleExpanded(element.firstElementChild);\n  }\n};\n","/* =====================================================================\n * Main\n * ===================================================================*/\n\nimport navbar from './components/navbar';\n\n(function () {\n  navbar.init();\n}());\n"],"names":["elements","navBar","document","querySelector","init","this","handleClick","handleKeyup","addEventListener","event","target","targetParent","parentNode","classList","contains","toggleNavbar","preventDefault","toggleSubmenu","disableActiveItems","window","innerWidth","key","getActiveItems","forEach","activeItem","toggleExpanded","element","ariaExpanded","getAttribute","setAttribute","context","querySelectorAll","body","toggle","add","overlayClass","navOverlay","map","animationEvent","remove","removeChild","newOverlay","createElement","className","onclick","appendChild","trigger","firstElementChild"],"sourceRoot":""}